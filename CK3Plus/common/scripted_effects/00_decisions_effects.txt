reclaim_britannia_decision_effect = {
	every_sub_realm_county = {
		limit = {
			NOT = { culture_group = culture_group:celtic_group }
			de_jure_liege.de_jure_liege.de_jure_liege = title:e_britannia
		}
		custom = british_isles.0001.custom
		add_county_modifier = {
			modifier = reclaim_britannia_culture_modifier
			days = 3650
		}
	}
	capital_county = {
		set_county_culture = root.culture
	}
	if = {
		limit = {
			culture_group = culture_group:celtic_group
		}
		give_nickname = nick_the_tuatha_de_danann
	}
	else = {
		give_nickname = nick_pendragon
	}
}

restore_the_danelaw_effect = {
	hidden_effect = { #Should shift all dejure of all Empires owned at the time.
		title:k_england = {
			every_in_de_jure_hierarchy = {
				limit = { tier = tier_duchy }
				set_de_jure_liege_title = title:k_danelaw
			}
		}
		title:k_danelaw = {
			set_de_jure_liege_title = title:k_england.de_jure_liege
		}
	}
	give_nickname = nick_the_dane
	create_title_and_vassal_change = change
	scope:change = {
		set_title_and_vassal_change_type = created
	}
	title:k_danelaw = {
		change_title_holder = {
			holder = root
			change = scope:change
		}
	}
	resolve_title_and_vassal_change = scope:change
	title:k_danelaw = {
		add_title_law = scandinavian_elective_succession_law
	}

	if = {
		limit = {
			NOT = { highest_held_title_tier = tier_empire }
			NOT = { has_primary_title = title:k_danelaw }
		}
		set_primary_title_to = title:k_danelaw
	}

	#Destroy england
	destroy_title = title:k_england
}


embrace_english_culture_effect = {
	# Scopes saves for localization
	root = {
		save_scope_as = embracer
	}

	# Prestige Bonus
	add_prestige = medium_prestige_gain

	#Convert your, and your whole family's, culture
	set_culture = culture:english
	if = {
		limit = { any_spouse = { is_landed = no } }
		every_spouse = {
			set_culture = culture:english
		}
	}
	if = {
		limit = {
			any_close_family_member = {
				is_landed = no
				NOT = { is_spouse_of = root }
			}
		}
		every_close_family_member = {
			custom = all_family_members
			limit = {
				NOT = { is_spouse_of = root }
			}
			set_culture = culture:english
		}
	}

	#Convert appropriate vassals, and their family
	if = {
		limit = {
			any_vassal = {
				is_ai = yes
				culture = root.culture
				primary_title = {
					OR = {
						de_jure_liege = title:k_england
						de_jure_liege.de_jure_liege = title:k_england
						de_jure_liege.de_jure_liege.de_jure_liege = title:k_england
					}
				}
			}
		}
		every_vassal = {
			custom = embrace_english_culture_vassals_custom
			limit = {
				is_ai = yes
				culture = root.culture
				primary_title = {
					OR = {
						de_jure_liege = title:k_england
						de_jure_liege.de_jure_liege = title:k_england
						de_jure_liege.de_jure_liege.de_jure_liege = title:k_england
					}
				}
			}
			set_culture = culture:english
			hidden_effect = {
				if = {
					limit = { any_spouse = { is_landed = no } }
					every_spouse = {
						set_culture = culture:english
					}
				}
				if = {
					limit = {
						any_close_family_member = {
							is_landed = no
							NOT = { is_spouse_of = prev }
						}
					}
					every_close_family_member = {
						limit = {
							is_landed = no
							NOT = { is_spouse_of = prev }
						}
						set_culture = culture:english
					}
				}
			}
		}
	}

	#Flip Counties
	every_county_in_region = {
		region = custom_england
		custom = embrace_english_culture_counties_custom
		limit = {
			target_is_de_facto_liege_or_above = root.primary_title
		}
		random = {
			chance = 40
			set_county_culture = culture:english
		}
	}

	culture:english = {
		custom_tooltip = decision_embrace_english_culture_get_innovations
		hidden_effect = {
			get_all_innovations_from = culture:norman
			get_all_innovations_from = culture:anglo_saxon
		}
	}
}

form_portugal_decision_effects = {
	#Create the title and set proper de jure
	hidden_effect = {
		title:d_porto = {
			save_scope_as = title_d_porto
			set_de_jure_liege_title = title:k_portugal
		}
		title:d_coimbra = {
			save_scope_as = title_d_coimbra
			set_de_jure_liege_title = title:k_portugal
		}
		title:d_beja = {
			save_scope_as = title_d_beja
			set_de_jure_liege_title = title:k_portugal
		}
		title:d_algarve = {
			save_scope_as = title_d_algarve
			set_de_jure_liege_title = title:k_portugal
		}
		title:k_portugal = {
			save_scope_as = title_k_portugal
		}
	}
	custom_tooltip = form_portugal_decision_effects_de_jure_tt

	create_title_and_vassal_change = title_change
	scope:title_change = {
		set_title_and_vassal_change_type = created
	}
	title:k_portugal = {
		change_title_holder = {
			holder = root
			change = scope:title_change
		}
		save_scope_as = title_k_portugal
	}
	resolve_title_and_vassal_change = scope:title_change

	if = {
		limit = {
			NOR = {
				primary_title = { this = title:k_portugal }
				highest_held_title_tier = tier_empire
			}
		}
		set_primary_title_to = title:k_portugal
	}

	#Covert self & court to portuguese culture
	if = {
		limit = { NOT = { has_culture = culture:portuguese } }

		every_courtier = {
			limit = { has_same_culture_as = scope:portugal_former }
			add_to_list = convert_list
		}

		set_culture = culture:portuguese

		every_in_list = {
			list = convert_list
			custom = portguese_convert_list #This says "every subject in the realm" even though vassals and their courts only covert later, through event
			set_culture = culture:portuguese
		}
	}

	# Convert Iberian counties to Portugese culture
	every_sub_realm_county = {
		limit = {
			tier = tier_county
			culture_group = culture_group:iberian_group
			OR = {
				de_jure_liege = title:d_porto
				de_jure_liege = title:d_coimbra
				de_jure_liege = title:d_beja
				de_jure_liege = title:d_algarve
			}
		}
		custom = portugese_convert_iberian_counties
		set_county_culture = culture:portuguese
	}
	every_sub_realm_county = {
		limit = {
			tier = tier_county
			NOT = { culture_group = culture_group:iberian_group }
			OR = {
				de_jure_liege = title:d_porto
				de_jure_liege = title:d_coimbra
				de_jure_liege = title:d_beja
				de_jure_liege = title:d_algarve
			}
		}
		custom = portugese_convert_non_iberian_counties
		random = {
			chance = 50
			set_county_culture = culture:portuguese
		}
	}

	#Innovations
	culture:portuguese = {
		add_random_innovation = culture_group_military
		add_random_innovation = culture_group_civic
	}

	#Prestige
	add_prestige = massive_prestige_gain
}



unite_the_spanish_thrones_decision_effects = {
	#Prestige
	add_prestige = massive_prestige_gain

	#Laws
	if = {
		limit = { has_realm_law = crown_authority_0 }
		add_realm_law_skip_effects = crown_authority_2
	}
	else_if = {
		limit = {
			OR = {
				has_realm_law = crown_authority_1
				has_realm_law = crown_authority_2
			}
		}
		add_realm_law_skip_effects = crown_authority_3
	}

	# Coat of Arms
	if = {
		limit = { scope:spain_uniter.primary_title = title:k_castille }
		primary_title = { set_coa = k_castille_leon }
	}
	else_if = {
		limit = { scope:spain_uniter.primary_title = title:k_leon }
		primary_title = { set_coa = k_leon_castille }
	}

	#Handle other Kingdom titles
	title:k_castille = { add_to_list = spanish_kingdoms }
	title:k_leon = { add_to_list = spanish_kingdoms }
	title:k_spanish_galicia = { add_to_list = spanish_kingdoms }
	title:k_portugal = { add_to_list = spanish_kingdoms }
	title:k_aragon = { add_to_list = spanish_kingdoms }
	title:k_navarra = { add_to_list = spanish_kingdoms }
	title:k_andalusia = { add_to_list = spanish_kingdoms }
	title:k_badajoz = { add_to_list = spanish_kingdoms }
	title:k_valencia = { add_to_list = spanish_kingdoms }

	custom_tooltip = unite_the_spanish_thrones_decision_titles_tt
	hidden_effect = {
		every_in_list = {
			list = spanish_kingdoms
			limit = {
				NOT = { this = scope:spain_uniter.primary_title }
				scope:spain_uniter = { completely_controls = prev }
			}

			#De jure shift all held spanish titles into your primary title
			every_in_de_jure_hierarchy = {
				limit = { tier = tier_duchy }
				set_de_jure_liege_title = scope:spain_uniter.primary_title
			}

			#Destroys them all!
			scope:spain_uniter = { destroy_title = prev }
		}
	}
}

unite_africa_decision_effects = {
	#Prestige
	add_prestige = massive_prestige_gain

	#Religion bonuses
	if = {
		limit = {
			faith = {
				OR = {
					religion_tag = islam_religion
					religion_tag = west_african_roog_religion
					religion_tag = west_african_religion
					religion_tag = west_african_bori_religion
					this = faith:coptic

				}
			}
		}
		add_piety = massive_piety_gain
		faith = { change_fervor = medium_fervor_gain }

		if = {
			limit = {
				any_vassal_or_below = {
					NOT = { faith = scope:africa_uniter.faith }
					is_ai = yes
					exists = capital_province
					capital_province = { geographical_region = world_africa }
				}
			}
			every_vassal_or_below = {
				custom = every_non_root_faith_vassal_africa
				limit = {
					NOT = { faith = scope:africa_uniter.faith }
					is_ai = yes
					exists = capital_province
					capital_province = { geographical_region = world_africa }
				}
				random = {
					chance = 33
					set_character_faith = scope:africa_uniter.faith
				}
			}
		}

		if = {
			limit = {
				any_realm_province = {
					NOT = { faith = scope:africa_uniter.faith }
					geographical_region = world_africa
				}
			}
			every_realm_province = {
				limit = {
					NOT = { faith = scope:africa_uniter.faith }
					geographical_region = world_africa
				}
				county = { add_to_list = every_realm_county }
			}

			every_in_list = {
				list = every_realm_county
				custom = every_non_root_faith_county_africa
				random = {
					chance = 33
					custom_tooltip = every_non_africa_uniter_faith_convert
					hidden_effect = { set_county_faith = scope:africa_uniter.faith }
				}
			}
		}
	}
}

avenge_the_battle_of_tours_decision_effects = {
	add_prestige = massive_prestige_gain

	#Religious bonuses
	add_piety = massive_piety_gain
	faith = { change_fervor = medium_fervor_gain }

	add_achievement_flag = { FLAG = achievement_al_andalus_flag }

	if = {
		limit = {
			any_vassal_or_below = {
				NOT = { faith = scope:avenger.faith }
				is_ai = yes
				exists = capital_province
				capital_province = { geographical_region = world_europe_west }
			}
		}
		every_vassal_or_below = {
			custom = every_non_root_faith_vassal_west_europe
			limit = {
				NOT = { faith = scope:avenger.faith }
				is_ai = yes
				exists = capital_province
				capital_province = { geographical_region = world_europe_west }
			}
			random = {
				chance = 33
				set_character_faith = scope:avenger.faith
			}
		}
	}

	if = {
		limit = {
			any_realm_province = {
				NOT = { faith = scope:avenger.faith }
				geographical_region = world_europe_west
			}
		}
		every_realm_province = {
			limit = {
				NOT = { faith = scope:avenger.faith }
				geographical_region = world_europe_west
			}
			county = {
				add_to_list = every_realm_county
			}
		}

		every_in_list = {
			list = every_realm_county
			custom = every_non_root_faith_county_west_europe
			random = {
				chance = 33
				custom_tooltip = every_non_avenger_faith_convert
				hidden_effect = { set_county_faith = scope:avenger.faith }
			}
		}
	}

	#Christian penalty
	if = {
		limit = { exists = scope:frankish_christian_faith }
		scope:frankish_christian_faith = { change_fervor = medium_fervor_loss }
	}
}

unite_the_western_slavs_decision_effects = {
	#Prestige
	add_prestige = massive_prestige_gain

	#Innovations
	culture = {
		add_random_innovation = culture_group_military
		add_random_innovation = culture_group_civic
	}

	#Laws
	if = {
		limit = { has_realm_law = crown_authority_0 }
		add_realm_law_skip_effects = crown_authority_2
	}
	else_if = {
		limit = {
			OR = {
				has_realm_law = crown_authority_1
				has_realm_law = crown_authority_2
			}
		}
		add_realm_law_skip_effects = crown_authority_3
	}

	#Handle de jure drift & destructions of other kingdom titles
	title:k_poland = { add_to_list = west_slavic_kingdoms }
	title:k_pomerania = { add_to_list = west_slavic_kingdoms }
	title:k_bohemia = { add_to_list = west_slavic_kingdoms }
	title:k_moravia = { add_to_list = west_slavic_kingdoms }

	if = {
		limit = { highest_held_title_tier = tier_kingdom }
		custom_tooltip = unite_the_western_slavs_decision_titles_tt
	}
	else = { custom_tooltip = unite_the_western_slavs_decision_titles_empire_tt }
	hidden_effect = {
		scope:western_slav_uniter = {
			#If king-tier, proceed as normal.
			if = {
				limit = { highest_held_title_tier = tier_kingdom }
				primary_title = { save_scope_as = wsu_primary_title }
			}
			#If higher than king tier, check to see which titles are eligible, and just pick one randomly.
			else = {
				every_held_title = {
					limit = {
						this = title:k_poland
						this = title:k_pomerania
						this = title:k_bohemia
						this = title:k_moravia
					}
					add_to_list = wsu_primary_kingdom_title_selection_list
				}
				random_in_list = {
					list = wsu_primary_kingdom_title_selection_list
					save_scope_as = wsu_primary_title
					weight = {
						base = 1
						modifier = {
							add = 1000
							this = title:k_poland
							scope:western_slav_uniter = { has_culture = culture:polish }
						}
						modifier = {
							add = 1000
							this = title:k_pomerania
							scope:western_slav_uniter = {
								OR = {
									has_culture = culture:pomeranian
									has_culture = culture:polabian
								}
							}
						}
						modifier = {
							add = 1000
							this = title:k_bohemia
							scope:western_slav_uniter = {
								OR = {
									has_culture = culture:czech
									has_culture = culture:slovien
								}
							}
						}
						modifier = {
							add = 1000
							this = title:k_moravia
							scope:western_slav_uniter = {
								OR = {
									has_culture = culture:czech
									has_culture = culture:slovien
								}
							}
						}
					}
				}
			}
		}

		every_in_list = {
			list = west_slavic_kingdoms
			limit = {
				NOT = { this = scope:wsu_primary_title }
				scope:western_slav_uniter = { completely_controls = prev }
			}

			#De jure shift all held west slavic titles into your primary title
			every_in_de_jure_hierarchy = {
				limit = { tier = tier_duchy }
				set_de_jure_liege_title = scope:wsu_primary_title
			}
		}

		#Destroy the waste titles
		every_in_list = {
			list = west_slavic_kingdoms
			limit = {
				NOT = { this = scope:wsu_primary_title }
			}
			scope:western_slav_uniter = { destroy_title = prev }
		}
	}
}

unite_the_southern_slavs_decision_effects = {
	#Prestige
	add_prestige = massive_prestige_gain

	#Innovations
	culture = {
		add_random_innovation = culture_group_military
		add_random_innovation = culture_group_civic
	}

	#Handle de jure drift & destructions of other kingdom titles
	title:k_croatia = { add_to_list = south_slavic_kingdoms }
	title:k_serbia = { add_to_list = south_slavic_kingdoms }
	title:k_bulgaria = { add_to_list = south_slavic_kingdoms }
	title:k_dacia = { add_to_list = south_slavic_kingdoms }
	title:k_moldavia = { add_to_list = south_slavic_kingdoms }

	custom_tooltip = unite_the_southern_slavs_decision_titles_tt
	hidden_effect = {
		every_in_list = {
			list = south_slavic_kingdoms
			limit = {
				NOT = { this = scope:southern_slav_uniter.primary_title }
				scope:southern_slav_uniter = { completely_controls = prev }
			}

			#De jure shift all held west slavic titles into your primary title
			every_in_de_jure_hierarchy = {
				limit = { tier = tier_duchy }
				set_de_jure_liege_title = scope:southern_slav_uniter.primary_title
			}

			#Destroys them all!
			scope:southern_slav_uniter = { destroy_title = prev }
		}
	}
}

unite_the_slavs_decision_effects = {
	#Prestige
	add_prestige = massive_prestige_gain

	#Innovations
	custom_tooltip = unite_the_slavs_decision_effects_innovations_tt
	hidden_effect = {
		#Add all Slavic cultures in the realm in a list
		every_vassal_or_below = {
			limit = {
				OR = {
					has_culture_group = culture_group:west_slavic_group
					has_culture_group = culture_group:east_slavic_group
					has_culture_group = culture_group:south_slavic_group
				}
				save_temporary_scope_as = slavic_vassal
				NOT = {
					any_in_list = {
						list = slavic_cultures
						this = scope:slavic_vassal.culture
					}
				}
			}
			culture = {
				add_to_list = slavic_cultures
			}
		}
		#Add innovations from 3 random cultures
		every_in_list = {
			list = slavic_cultures
			save_scope_as = culture_getting_innovations

			set_while_counter_variable_effect = yes
			while = {
				limit = { var:while_counter < 3 }
				random_in_list = {
					limit = { scope:culture_getting_innovations = { can_get_innovation_from = prev } }
					list = slavic_cultures
					scope:culture_getting_innovations = { get_random_innovation_from = prev }
				}
				increase_while_counter_variable_effect = yes
			}
			remove_while_counter_variable_effect = yes
		}
	}

	#Create the title and make it primary
	create_title_and_vassal_change = title_change
	scope:title_change = {
		set_title_and_vassal_change_type = created
	}
	title:e_slavia = {
		change_title_holder = {
			holder = root
			change = scope:title_change
		}
	}
	resolve_title_and_vassal_change = scope:title_change

	set_primary_title_to = title:e_slavia

	###Handle de jure drift and empire destruction###

	#First: add all the kingdoms
	title:k_poland = { add_to_list = slavic_kingdoms }
	title:k_pomerania = { add_to_list = slavic_kingdoms }
	title:k_bohemia = { add_to_list = slavic_kingdoms }
	title:k_moravia = { add_to_list = slavic_kingdoms }
	title:k_croatia = { add_to_list = slavic_kingdoms }
	title:k_serbia = { add_to_list = slavic_kingdoms }
	title:k_bulgaria = { add_to_list = slavic_kingdoms }
	title:k_dacia = { add_to_list = slavic_kingdoms }
	title:k_moldavia = { add_to_list = slavic_kingdoms }
	title:k_white_rus = { add_to_list = slavic_kingdoms }
	title:k_galicia-volhynia = { add_to_list = slavic_kingdoms }
	title:k_ruthenia = { add_to_list = slavic_kingdoms }
	title:k_novgorod = { add_to_list = slavic_kingdoms }
	title:k_permia = { add_to_list = slavic_kingdoms }
	title:k_hungary = { add_to_list = slavic_kingdoms }

	#Has one of the 3 empires in the region? De jure drift all of it into Slavia!
	if = {
		limit = { has_title = title:e_russia }
		title:e_russia = {
			every_in_de_jure_hierarchy = {
				limit = {
					save_temporary_scope_as = russian_duchy
					NOR = {
						this = title:e_russia
						any_in_list = { list = slavic_kingdoms this = scope:russian_duchy }
					}
					exists = holder
					holder = scope:slav_uniter
					tier = tier_duchy
				}
				add_to_list = slavic_kingdoms
			}
		}
	}

	if = {
		limit = { has_title = title:e_wendish_empire }
		title:e_wendish_empire = {
			every_in_de_jure_hierarchy = {
				limit = {
					save_temporary_scope_as = wendish_duchy
					NOR = {
						this = title:e_wendish_empire
						any_in_list = { list = slavic_kingdoms this = scope:wendish_duchy }
					}
					exists = holder
					holder = scope:slav_uniter
					tier = tier_duchy
				}
				add_to_list = slavic_kingdoms
			}
		}
	}

	if = {
		limit = { has_title = title:e_carpathia }
		title:e_carpathia = {
			every_in_de_jure_hierarchy = {
				limit = {
					save_temporary_scope_as = carpathian_duchy
					NOR = {
						this = title:e_carpathia
						any_in_list = { list = slavic_kingdoms this = scope:carpathian_duchy }
					}
					exists = holder
					holder = scope:slav_uniter
					tier = tier_duchy
				}
				add_to_list = slavic_kingdoms
			}
		}
	}

	title:e_slavia = { save_scope_as = slavia } #for localisation

	#Actually do the de jure drift
	custom_tooltip = unite_the_slavs_decision_titles_tt
	hidden_effect = {
		every_in_list = {
			list = slavic_kingdoms
			limit = {
				NOT = { this = scope:slav_uniter.primary_title }
				scope:slav_uniter = { completely_controls = prev }
			}

			#De jure shift all held west slavic titles into your primary title
			every_in_de_jure_hierarchy = {
				limit = { tier = tier_kingdom }
				set_de_jure_liege_title = scope:slav_uniter.primary_title
			}
		}
	}

	#Destroy the other three empires if I have them
	if = {
		limit = { has_title = title:e_russia }
		destroy_title = title:e_russia
	}
	if = {
		limit = { has_title = title:e_wendish_empire }
		destroy_title = title:e_wendish_empire
	}
	if = {
		limit = { has_title = title:e_carpathia }
		destroy_title = title:e_carpathia
	}
}

unite_india_decision_effect = {
	#Create the title and make it primary
	create_title_and_vassal_change = title_change
	scope:title_change = {
		set_title_and_vassal_change_type = created
	}
	title:e_india = {
		change_title_holder = {
			holder = root
			change = scope:title_change
		}
	}
	resolve_title_and_vassal_change = scope:title_change
	set_primary_title_to = title:e_india

	title:e_rajastan = { add_to_list = indian_empire }
	title:e_deccan = { add_to_list = indian_empire }
	title:e_bengal = { add_to_list = indian_empire }

	every_in_list = {
		list = indian_empire
		every_in_de_jure_hierarchy = {
			limit = {
				tier = tier_kingdom
			}
			set_de_jure_liege_title = title:e_india
		}
	}

	hidden_effect = {
		if = {
			limit = { has_title = title:e_rajastan }
			destroy_title = title:e_rajastan
		}
		if = {
			limit = { has_title = title:e_deccan }
			destroy_title = title:e_deccan
		}
		if = {
			limit = { has_title = title:e_bengal }
			destroy_title = title:e_bengal
		}
	}
}

build_grand_church_decision_effect = {
	faith = { activate_holy_site = segrada_familia }
	if = {
		limit = {
			prestige_level < 5
		}
		add_prestige_level = 1
	}
}

accept_cannibalism_decision_effect = {
	custom_tooltip = faith_accept_cannibalism
	root.faith = {
		set_variable = {
			name = accepted_cannibalsim
			value = yes
		}
	}
	root = {
		if = {
			limit = {
				any_spouse = {
					is_cannibal_trigger = no
					is_ai = yes
				}
			}
			every_spouse = {
				limit = {
					is_cannibal_trigger = no
					is_ai = yes
				}
				add_trait = cannibal
			}
		}
		if = {
			limit = {
				any_close_family_member = {
					is_cannibal_trigger = no
					is_landed = no
					is_ai = yes
				}
			}
			every_close_family_member = {
				limit = {
					is_cannibal_trigger = no
					is_landed = no
					is_ai = yes
				}
				custom = all_my_family_members
				add_trait = cannibal
			}
		}
		if = {
			limit = {
				any_vassal = {
					is_cannibal_trigger = no
					is_ai = yes
					dread_modified_ai_boldness = { #all vassals that are intimidated
						dreaded_character = root
						value <= -50
					}
				}
			}
			every_vassal = {
				limit = {
					is_cannibal_trigger = no
					is_ai = yes
					dread_modified_ai_boldness = {
						dreaded_character = root
						value <= -50
					}
				}
				custom = all_my_intimidated_vassals
				add_trait = cannibal
			}
		}
	}
	give_nickname = nick_the_devourer
}

found_university_decision_event_effect = {
	if = {
		limit = {
			NOT = { has_nickname = nick_the_scholar }
		}
		give_nickname = nick_the_scholar
	}

	hidden_effect = {
		#Event that gives you highly skilled courtier
		random = {
			chance = 75
			trigger_event = {
				id = major_decisions.2011
				days = { 50 365 }
			}
		}
	}
}

found_university_decision_effect = {
	found_university_decision_event_effect = yes

	if = {
		limit = {
			NOT = { has_variable = university }
		}
		show_as_tooltip = {
			every_held_title = {
				custom = decision_found_university_custom
				limit = { tier = tier_barony }
				title_capital_county.title_province = {
					add_special_building_slot = generic_university
				}
			}
		}
	}
}

lunatic_building_decision_effect = {
	capital_province = {
		set_variable = { #To unlock the building
			name = variable_greenhouse
			value = yes
		}
		add_building_slot = 1
		add_building = special_greenhouse_01
	}

	give_nickname = nick_the_glass
}

found_witch_coven_decision_effects = {
	save_scope_as = founder
	custom_tooltip = found_witch_coven_decision_effects.children.tt
	custom_tooltip = found_witch_coven_decision_effects.convert.tt
	custom_tooltip = found_witch_coven_decision_effects.grand_rite.tt
	house = {
		add_house_modifier = {
			modifier = witch_coven
		}
	}
}

convert_whole_realm_to_feudalism_effect = {
	#TOOLTIP INFO
	#PLAYER EFFECTS
	##Liege has clan? Convert to clan!
	if = {
		limit = {
			is_independent_ruler = no
			liege = { has_government = clan_government }
		}
		change_government = clan_government
	}
	##Liege has feudal? Convert to feudal!
	else_if = {
		limit = {
			is_independent_ruler = no
			liege = { has_government = feudal_government }
		}
		change_government = feudal_government
	}
	##You're an independent Muslim? Convert to clan!
	else_if = {
		limit = {
			is_independent_ruler = yes
			faith = { religion_tag = islam_religion }
		}
		change_government = clan_government
	}
	##You're an independent anything else? Convert to feudal!
	else = { change_government = feudal_government }
	##General
	custom_tooltip = all_holding_will_change
	##Liege has clan? Convert to clan!
	if = {
		limit = {
			is_independent_ruler = no
			liege = { has_government = clan_government }
		}
		custom_tooltip = clan_liege_vassals_will_convert
	}
	#Liege has feudal? Convert to feudal!
	if = {
		limit = {
			is_independent_ruler = no
			liege = { has_government = feudal_government }
		}
		custom_tooltip = feudal_liege_vassals_will_convert
	}
	##If I am Islamic, we will become clan.
	if = {
		limit = {
			is_independent_ruler = yes
			faith = { religion_tag = islam_religion }
		}
		custom_tooltip = islamic_vassals_will_convert
	}
	##If I am not Islamic, we will become feudal.
	else_if = {
		limit = { is_independent_ruler = yes }
		custom_tooltip = other_vassals_will_convert
	}

	##Sort out new laws.
	hidden_effect = {
		every_realm_province = {
			limit = { has_holding_type = tribal_holding }
			set_holding_type = castle_holding
		}
		#Nuke tribal authorities.
		if = {
			limit = { has_realm_law = tribal_authority_0 }
			remove_realm_law = tribal_authority_0
		}
		if = {
			limit = { has_realm_law = tribal_authority_1 }
			remove_realm_law = tribal_authority_1
		}
		if = {
			limit = { has_realm_law = tribal_authority_2 }
			remove_realm_law = tribal_authority_2
		}
		if = {
			limit = { has_realm_law = tribal_authority_3 }
			remove_realm_law = tribal_authority_3
		}
		#Start off crown authorities.
		if = {
			limit = {
				NOT = { has_realm_law = crown_authority_0 }
			}
			add_realm_law_skip_effects = crown_authority_0
		}
	}

	#VASSAL EFFECTS
	#Also convert every vassal.
	hidden_effect = {
		#Liege has taken clan, so become clan.
		if = {
			limit = {
				has_government = clan_government
			}
			every_vassal = {
				limit = { has_government = tribal_government }
				change_government = clan_government
				#Nuke tribal authorities.
				if = {
					limit = { has_realm_law = tribal_authority_0 }
					remove_realm_law = tribal_authority_0
				}
				if = {
					limit = { has_realm_law = tribal_authority_1 }
					remove_realm_law = tribal_authority_1
				}
				if = {
					limit = { has_realm_law = tribal_authority_2 }
					remove_realm_law = tribal_authority_2
				}
				if = {
					limit = { has_realm_law = tribal_authority_3 }
					remove_realm_law = tribal_authority_3
				}
				if = {
					limit = {
						NOT = { has_realm_law = crown_authority_0 }
					}
					add_realm_law_skip_effects = crown_authority_0
				}
			}
		}
		#Liege is not clan, become feudal.
		else = {
			every_vassal = {
				limit = { has_government = tribal_government }
				change_government = feudal_government
				#Nuke tribal authorities.
				if = {
					limit = { has_realm_law = tribal_authority_0 }
					remove_realm_law = tribal_authority_0
				}
				if = {
					limit = { has_realm_law = tribal_authority_1 }
					remove_realm_law = tribal_authority_1
				}
				if = {
					limit = { has_realm_law = tribal_authority_2 }
					remove_realm_law = tribal_authority_2
				}
				if = {
					limit = { has_realm_law = tribal_authority_3 }
					remove_realm_law = tribal_authority_3
				}
				if = {
					limit = {
						NOT = { has_realm_law = crown_authority_0 }
					}
					add_realm_law_skip_effects = crown_authority_0
				}
			}
		}
	}
}

special_succession_witengamot_effect = {
	if = {
		limit = { highest_held_title_tier = tier_empire }
		every_held_title = {
			limit = {
				tier = tier_empire
				NOR = {
					has_title_law_flag = advanced_succession_law
					has_title_law_flag = elective_succession_law
				}
			}
			add_title_law = saxon_elective_succession_law
		}
		every_vassal = {
			limit = { special_succession_witengamot_trigger = yes }
			add_opinion = {
				modifier = implemented_traditional_succession_law_opinion
				years = 20
				target = root
			}
			custom = major_decisions.3100.tt_opinion_witengamot
		}
	}
	else = {
		every_held_title = {
			limit = {
				tier = tier_kingdom
				NOR = {
					has_title_law_flag = advanced_succession_law
					has_title_law_flag = elective_succession_law
				}
			}
			add_title_law = saxon_elective_succession_law
		}
		every_vassal = {
			limit = { special_succession_witengamot_trigger = yes }
			add_opinion = {
				modifier = implemented_traditional_succession_law_opinion
				years = 20
				target = root
			}
			custom = major_decisions.3100.tt_opinion_witengamot
		}
	}
}

special_succession_thing_effect = {
	if = {
		limit = { highest_held_title_tier = tier_empire }
		every_held_title = {
			limit = {
				tier = tier_empire
				NOR = {
					has_title_law_flag = advanced_succession_law
					has_title_law_flag = elective_succession_law
				}
			}
			add_title_law = scandinavian_elective_succession_law
		}
		every_vassal = {
			limit = { special_succession_thing_trigger = yes }
			add_opinion = {
				modifier = implemented_traditional_succession_law_opinion
				years = 20
				target = root
			}
			custom = major_decisions.3100.tt_opinion_thing
		}
	}
	else = {
		every_held_title = {
			limit = {
				tier = tier_kingdom
				NOR = {
					has_title_law_flag = advanced_succession_law
					has_title_law_flag = elective_succession_law
				}
			}
			add_title_law = scandinavian_elective_succession_law
		}
		every_vassal = {
			limit = { special_succession_thing_trigger = yes }
			add_opinion = {
				modifier = implemented_traditional_succession_law_opinion
				years = 20
				target = root
			}
			custom = major_decisions.3100.tt_opinion_thing
		}
	}
}

special_succession_tanistry_effect = {
	if = {
		limit = { highest_held_title_tier = tier_empire }
		every_held_title = {
			limit = {
				tier = tier_empire
				NOR = {
					has_title_law_flag = advanced_succession_law
					has_title_law_flag = elective_succession_law
				}
			}
			add_title_law = gaelic_elective_succession_law
		}
		every_vassal = {
			limit = { special_succession_tanistry_trigger = yes }
			add_opinion = {
				modifier = implemented_traditional_succession_law_opinion
				years = 20
				target = root
			}
			custom = major_decisions.3100.tt_opinion_tanistry
		}
	}
	else = {
		every_held_title = {
			limit = {
				tier = tier_kingdom
				NOR = {
					has_title_law_flag = advanced_succession_law
					has_title_law_flag = elective_succession_law
				}
			}
			add_title_law = gaelic_elective_succession_law
		}
		every_vassal = {
			limit = { special_succession_tanistry_trigger = yes }
			add_opinion = {
				modifier = implemented_traditional_succession_law_opinion
				years = 20
				target = root
			}
			custom = major_decisions.3100.tt_opinion_tanistry
		}
	}
}

launch_hungarian_migration_scripted_effect = {
	$INVADER$ = {
		#If Hungary already exists, just tell us it's getting a name change.
		if = {
			limit = {
				title:k_hungary = { is_title_created = yes }
			}
			custom_tooltip = launch_hungarian_migration_scripted_effect.tt.pannonia_renamed
			title:k_hungary = { set_title_name = k_hungary }
		}
		#Otherwise, if Hungary doesn't exist, create & acquire it _whilst_ giving it a name change.
		else_if = {
			limit = {
				title:k_hungary = { is_title_created = no }
			}
			custom_tooltip = launch_hungarian_migration_scripted_effect.tt.pannonia_renamed_and_usurped
			hidden_effect = {
				create_title_and_vassal_change = change
				scope:change = { set_title_and_vassal_change_type = created	}
				title:k_hungary = {
					change_title_holder = {
						holder = $INVADER$
						change = scope:change
					}
				}
				resolve_title_and_vassal_change = scope:change
				title:k_hungary = { set_title_name = k_hungary }
			}
		}

		#If $INVADER$ has both k_hungary & any other kingdom-tier title, destroy the excess titles.
		custom_tooltip = launch_hungarian_migration_scripted_effect.tt.destroy_other_kingdoms
		hidden_effect = {
			if = {
				limit = {
					has_title = title:k_hungary
					any_held_title = {
						tier >= tier_kingdom
						count >= 2
					}
				}
				every_held_title = {
					limit = {
						tier >= tier_kingdom
						NOT = { this = title:k_hungary }
					}
					save_temporary_scope_as = excess_kingdom
					$INVADER$ = { destroy_title = scope:excess_kingdom }
				}
			}
		}

		#Replace all Avar territories within Pannonia with Mogyer, excepting Keve & Krasso.
		custom_tooltip = launch_hungarian_migration_scripted_effect.tt.mogyers_move_to_pannonia
		hidden_effect = {
			every_sub_realm_county = {
				limit = {
					title_capital_county.title_province = { geographical_region = custom_hungary }
					culture = culture:avar
					NOR = {
						this = title:c_keve
						this = title:c_krasso
					}
				}
				set_county_culture = culture:mogyer
				#Switch 'em to $INVADER$'s faith if unreformed & $INVADER$ is any Magyar pagan.
				if = {
					limit = {
						$INVADER$.faith.religion = religion:magyar_religion
						faith = { has_doctrine = unreformed_faith_doctrine }
					}
					set_county_faith = $INVADER$.faith
				}
			}
		}

		#Replace all Mogyer territories outside of the Pannonian Basin
		custom_tooltip = launch_hungarian_migration_scripted_effect.tt.mogyers_outside_pannonia
		hidden_effect = {
			every_sub_realm_county = {
				limit = {
					NOT = {
						title_capital_county.title_province = { geographical_region = custom_hungary }
					}
					culture = culture:mogyer
				}
				set_county_culture = culture:pecheneg
			}
			#Switch 'em to Tengri if Magyar pagan.
			every_sub_realm_county = {
				limit = {
					NOT = {
						title_capital_county.title_province = { geographical_region = custom_hungary }
					}
					culture = culture:pecheneg
					religion = religion:magyar_religion
				}
				set_county_faith = faith:tengri_pagan
			}
		}

		#All territory outside Pannonia is given to new holders and/or made independent.
		custom_tooltip = launch_hungarian_migration_scripted_effect.tt.territory_outside_pannonia.non_mogyer_vassals
		custom_tooltip = launch_hungarian_migration_scripted_effect.tt.territory_outside_pannonia.mogyer_vassals
		custom_tooltip = launch_hungarian_migration_scripted_effect.tt.territory_outside_pannonia.former_territories
		hidden_effect = {
			#All direct vassal non-Mogyers are given their independence, unless they hold land within Pannonia.
			every_vassal = {
				limit = {
					NOT = { culture = culture:mogyer }
					highest_held_title_tier >= tier_county
					any_held_title = {
						count = all
						NOT = {
							title_capital_county.title_province = { geographical_region = custom_hungary }
						}
					}
				}
				create_title_and_vassal_change = change
				scope:change = {
					set_title_and_vassal_change_type = independency
					set_add_claim_on_loss = no
				}
				becomes_independent = { change = scope:change }
				resolve_title_and_vassal_change = scope:change
			}
			#... And catch the stragglers. Has to be a separate effect block, or we'll ruin the de facto structure.
			every_vassal_or_below = {
				limit = {
					NOT = { culture = culture:mogyer }
					highest_held_title_tier >= tier_county
					any_held_title = {
						count = all
						NOT = {
							title_capital_county.title_province = { geographical_region = custom_hungary }
						}
					}
				}
				create_title_and_vassal_change = change
				scope:change = {
					set_title_and_vassal_change_type = independency
					set_add_claim_on_loss = no
				}
				becomes_independent = { change = scope:change }
				resolve_title_and_vassal_change = scope:change
			}
			#Reserve a duchy, preferring the capital, for $INVADER$.
			if = {
				limit = { title:k_hungary.title_capital_county.duchy.holder = $INVADER$ }
				title:k_hungary.title_capital_county.duchy = { save_scope_as = reserved_title }
			}
			#... Of course, if we can't have the capital for some reason, grab any random duchy in Pannonia.
			else = {
				random_held_title = {
					#Filter out Syrmia, because Syrmia sucks.
					limit = {
						title_capital_county.title_province = { geographical_region = custom_hungary }
						tier = tier_duchy
						NOT = { this = title:d_syrmia }
					}
					#But if we have no other choice, Syrmia is better than no duchy.
					limit = {
						title_capital_county.title_province = { geographical_region = custom_hungary }
						tier = tier_duchy
					}
					#If we have no possible duchy, make sure to reserve at least *one* county within Pannonia.
					alternative_limit = {
						title_capital_county.title_province = { geographical_region = custom_hungary }
					}
					save_scope_as = reserved_title
				}
			}
			#Find all Mogyer vassals outside of Pannonia.
			every_vassal_or_below = {
				limit = {
					culture = culture:mogyer
					highest_held_title_tier >= tier_county
				}
				add_to_list = mogyer_vassals_list
			}
			#Find all Pannonian titles held by $INVADER$ that aren't reserved.
			every_held_title = {
				limit = {
					title_capital_county.title_province = { geographical_region = custom_hungary }
					#Technically we could use any_this_title_or_de_jure_above for the following two checks, but it was being problematic and this does the same thing (just more cumbersomely).
					OR = {
						tier = tier_county
						tier = tier_duchy
					}
					NOT = { this = scope:reserved_title }
				}
				add_to_list = spare_pannonian_titles_list
			}
			#Attempt to give out Pannonian holdings to the vassals who are about to lose land, prioritising players by tier, then NPCs by tier.
			##Now, process duchy title assignment.
			every_in_list = {
				list = mogyer_vassals_list
				#Players first.
				limit = {
					is_ai = no
					launch_hungarian_migration_ducal_processing_trigger = yes
				}
				#NPCs after that.
				alternative_limit = {
					is_ai = yes
					launch_hungarian_migration_ducal_processing_trigger = yes
				}
				#Grab the appropriate vassal.
				save_temporary_scope_as = receiving_vassal
				#If $INVADER$ has a suitable spare ducal title, hand it over.
				if = {
					limit = {
						any_in_list = {
							list = spare_pannonian_titles_list
							tier = tier_duchy
							holder = $INVADER$
						}
					}
					#Save the suitable title.
					random_in_list = {
						list = spare_pannonian_titles_list
						limit = {
							tier = tier_duchy
							holder = $INVADER$
						}
						every_in_de_jure_hierarchy = {
							limit = {
								holder = $INVADER$
								tier >= tier_county
							}
							add_to_list = multiple_donated_titles
						}
					}
					#Hand it to the receiving vassal.
					create_title_and_vassal_change = change
					scope:change = { set_title_and_vassal_change_type = granted }
					every_in_list = {
						list = multiple_donated_titles
						save_temporary_scope_as = donated_title
						scope:donated_title = {
							change_title_holder = {
								holder = scope:receiving_vassal
								change = scope:change
							}
						}
						remove_from_list = multiple_donated_titles
					}
					resolve_title_and_vassal_change = scope:change
				}
			}
			##Finally, process county title assignment.
			###First, attempt to pair de facto sub-vassals to their lieges.
			every_in_list = {
				list = mogyer_vassals_list
				#Players first.
				limit = {
					is_ai = no
					launch_hungarian_migration_count_processing_trigger = yes
				}
				#NPCs after that.
				alternative_limit = {
					is_ai = yes
					launch_hungarian_migration_count_processing_trigger = yes
				}
				#Grab the appropriate vassal.
				save_temporary_scope_as = receiving_vassal
				#If $INVADER$ has a suitable spare county title, hand it over.
				if = {
					#Try to pair vassals with their lieges first.
					limit = {
						#Direct vassals shouldn't bother to try pairing.
						NOT = { liege = $INVADER$ }
						any_in_list = {
							list = spare_pannonian_titles_list
							launch_hungarian_migration_sub_vassal_liege_pairing_trigger = yes
						}
					}
					#Save the suitable title.
					random_in_list = {
						list = spare_pannonian_titles_list
						limit = {
							#Direct vassals shouldn't bother to try pairing.
							NOT = { scope:receiving_vassal.liege = $INVADER$ }
							#Run the stock trigger.
							launch_hungarian_migration_sub_vassal_liege_pairing_trigger = yes
							#Don't give away the new liege's primary title's capital county.
							NOT = {	this = holder.primary_title.title_capital_county }
						}
						save_temporary_scope_as = donated_title
					}
					#Hand it to the receiving vassal.
					create_title_and_vassal_change = change
					scope:change = { set_title_and_vassal_change_type = granted }
					scope:donated_title = {
						change_title_holder = {
							holder = scope:receiving_vassal
							change = scope:change
						}
					}
					resolve_title_and_vassal_change = scope:change
				}
			}
			###Then, filter through any remaining direct vassals.
			every_in_list = {
				list = mogyer_vassals_list
				#Players first.
				limit = {
					is_ai = no
					launch_hungarian_migration_count_processing_trigger = yes
				}
				#NPCs after that.
				alternative_limit = {
					is_ai = yes
					launch_hungarian_migration_count_processing_trigger = yes
				}
				#Grab the appropriate vassal.
				save_temporary_scope_as = receiving_vassal
				#If $INVADER$ has a suitable spare county title, hand it over.
				if = {
					#Otherwise, grab any spare valid title that $INVADER$ has lying around.
					limit = {
						any_in_list = {
							list = spare_pannonian_titles_list
							launch_hungarian_migration_direct_vassal_requirements_trigger = { INVADER = $INVADER$ }
						}
					}
					#Save the suitable title.
					random_in_list = {
						list = spare_pannonian_titles_list
						limit = {
							launch_hungarian_migration_direct_vassal_requirements_trigger = { INVADER = $INVADER$ }
						}
						save_temporary_scope_as = donated_title
					}
					#Hand it to the receiving vassal.
					create_title_and_vassal_change = change
					scope:change = { set_title_and_vassal_change_type = granted }
					scope:donated_title = {
						change_title_holder = {
							holder = scope:receiving_vassal
							change = scope:change
						}
					}
					resolve_title_and_vassal_change = scope:change
				}
			}
			##Clean-up: any landless characters should move to $INVADER$'s court.
			every_in_list = {
				list = mogyer_vassals_list
				limit = { is_ruler = no}
				save_temporary_scope_as = landless_mogyer_vassal
				$INVADER$ = { add_courtier = scope:landless_mogyer_vassal }
			}
			#Sum all remaining territory outside of Pannonia & give that territory to created local characters.
			##Start by trying to group duchies.
			every_sub_realm_title = {
				#First we try to make duchy power blocks.
				if = {
					#Grab duchies outside of Pannonia.
					limit = {
						NOT = {
							title_capital_county.title_province = { geographical_region = custom_hungary }
						}
						tier = tier_duchy
					}
					save_temporary_scope_as = seceding_duchy
					#Now grab the duchy & any sub-realm counties beneath it outside of Pannonia, and filter them to a list for processing.
					scope:seceding_duchy = {
						every_in_de_jure_hierarchy = {
							limit = {
								tier >= tier_county
								OR = {
									holder = $INVADER$
									holder = {
										any_liege_or_above = { this = $INVADER$ }
									}
								}
							}
							add_to_temporary_list = seceding_duchy_list
						}
					}
					#Create a local peasant warlord for the duchy & counties.
					create_character = {
						location = scope:seceding_duchy.title_capital_county.title_province
						template = post_migration_local_warlord_template
						save_scope_as = local_warlord
					}
					#Assign the seceding titles to the new peasant warlord.
					create_title_and_vassal_change = change
					scope:change = { set_title_and_vassal_change_type = usurped }
					every_in_list = {
						list = seceding_duchy_list
						limit = {
							NAND = {
								tier = tier_county
								title_province = { geographical_region = custom_hungary }
							}
						}
						change_title_holder = {
							holder = scope:local_warlord
							change = scope:change
							take_baronies = yes
						}
						remove_from_list = seceding_duchy_list
					}
					resolve_title_and_vassal_change = scope:change
					#And give the warlord their independence.
					create_title_and_vassal_change = change
					scope:local_warlord = {
						scope:change = {
							set_title_and_vassal_change_type = independency
							set_add_claim_on_loss = no
						}
						becomes_independent = { change = scope:change }
					}
					resolve_title_and_vassal_change = scope:change
					#If any vassals within Pannonia have gotten mixed up, shunt them back to $INVADER$, and try to find a suitable duke.
					##Start off by assembling a suitable list of affected vassals (should only ever be the one, but you never know).
					scope:local_warlord = {
						every_vassal = {
							limit = {
								#We're only interested in counts...
								highest_held_title_tier = tier_county
								#... Within Panonnia.
								any_held_title = { launch_hungarian_migration_county_is_within_custom_hungary_trigger = yes }
							}
							add_to_list = vassals_to_shunt
						}
					}
					##Sort through the list, see who should be the new liege of the misplaced vassals.
					every_in_list = {
						list = vassals_to_shunt
						#First off, check if there's a valid duke to hand 'em over to.
						if = {
							limit = {
								any_held_title = {
									launch_hungarian_migration_misplaced_count_suitable_liege_trigger = { INVADER = $INVADER$ }
								}
							}
							#If there is, we make a note of them for liege determination.
							random_held_title = {
								limit = {
									launch_hungarian_migration_misplaced_count_suitable_liege_trigger = { INVADER = $INVADER$ }
								}
								duchy.holder = { save_scope_as = appropriate_liege }
							}
						}
						#Otherwise, we just grab $INVADER$ as a solid fallback.
						else = {
							$INVADER$ = { save_scope_as = appropriate_liege }
						}
						#Reassign the errant vassal back to their rightful Pannonian realm.
						create_title_and_vassal_change = change
						scope:change = {
							set_title_and_vassal_change_type = conquest
							set_add_claim_on_loss = no
						}
						change_liege = {
							liege = scope:appropriate_liege
							change = scope:change
						}
						resolve_title_and_vassal_change = scope:change
					}
				}
			}
			##... Then we catch the straggler counties.
			every_sub_realm_title = {
				#First we try to make duchy power blocks.
				if = {
					#Grab duchies outside of Pannonia.
					limit = {
						NOT = {
							title_capital_county.title_province = { geographical_region = custom_hungary }
						}
						tier = tier_county
					}
					save_temporary_scope_as = seceding_county
					#Create a local peasant warlord for the county.
					create_character = {
						location = scope:seceding_county.title_province
						template = post_migration_minor_warlord_template
						save_scope_as = minor_warlord
					}
					#Assign the seceding title to the new peasant warlord.
					create_title_and_vassal_change = change
					scope:change = { set_title_and_vassal_change_type = usurped }
					scope:seceding_county = {
						change_title_holder = {
							holder = scope:minor_warlord
							change = scope:change
							take_baronies = yes
						}
					}
					resolve_title_and_vassal_change = scope:change
					#And give the warlord their independence.
					create_title_and_vassal_change = change
					scope:minor_warlord = {
						scope:change = {
							set_title_and_vassal_change_type = independency
							set_add_claim_on_loss = no
						}
						becomes_independent = { change = scope:change }
					}
					resolve_title_and_vassal_change = scope:change
				}
			}
		}
	}
}